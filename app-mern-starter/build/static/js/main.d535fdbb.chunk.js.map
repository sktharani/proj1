{"version":3,"sources":["features/appSlice.js","SidebarChannel.js","features/userSlice.js","firebase.js","axios.js","Sidebar.js","ChatHeader.js","Message.js","Chat.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["appSlice","createSlice","name","initialState","channelId","channelName","reducers","setChannelInfo","state","action","payload","actions","selectChannelId","app","selectChannelName","SidebarChannel","id","dispatch","useDispatch","className","onClick","userSlice","user","login","logout","selectUser","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","provider","GoogleAuthProvider","instance","axios","create","baseURL","pusher","Pusher","cluster","Sidebar","useSelector","useState","channels","setChannels","getChannels","get","then","res","data","useEffect","subscribe","bind","e","preventDefault","prompt","post","map","channel","key","fontSize","Avatar","src","photo","signOut","displayName","uid","substring","ChatHeader","type","placeholder","Message","timestamp","message","Date","parseInt","toDateString","Chat","input","setInput","messages","setMessages","getConversation","conversation","console","log","disabled","value","onChange","target","now","Login","alt","Button","signInWithPopup","catch","err","alert","App","onAuthStateChanged","authUser","photoURL","email","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d535fdbb.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const appSlice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        channelId: null,\r\n        channelName: null\r\n    },\r\n    reducers: {\r\n        setChannelInfo: (state, action) => {\r\n            state.channelId = action.payload.channelId\r\n            state.channelName = action.payload.channelName\r\n        }\r\n    },\r\n});\r\n\r\nexport const { setChannelInfo } = appSlice.actions;\r\n\r\nexport const selectChannelId = (state) => state.app.channelId;\r\nexport const selectChannelName = (state) => state.app.channelName;\r\n\r\nexport default appSlice.reducer;\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setChannelInfo } from './features/appSlice'\r\nimport './SidebarChannel.css'\r\n\r\nconst SidebarChannel = ({ id, channelName }) => {\r\n    const dispatch = useDispatch()\r\n    return (\r\n        <div className='sidebarChannel' onClick={() => dispatch(setChannelInfo({\r\n            channelId: id,\r\n            channelName: channelName\r\n        }))} >\r\n            <h4><span className='sidebarChannel__hash'>#</span>{channelName}</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarChannel\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null\r\n    }\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = state => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import firebase from 'firebase'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyD0-owHo0b4ooo6QEU4RYEFiZiH-rtHr4o\",\r\n  authDomain: \"chat-app-a2c8e.firebaseapp.com\",\r\n  projectId: \"chat-app-a2c8e\",\r\n  storageBucket: \"chat-app-a2c8e.appspot.com\",\r\n  messagingSenderId: \"76304976812\",\r\n  appId: \"1:76304976812:web:d70481351c8cdfde1a4809\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig)\r\n\r\nconst db = firebaseApp.firestore()\r\nconst auth = firebase.auth()\r\nconst provider = new firebase.auth.GoogleAuthProvider()\r\n\r\nexport { auth, provider }\r\nexport default db","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://app-mern-chat.herokuapp.com'\r\n})\r\n\r\nexport default instance","import React from 'react'\r\nimport './Sidebar.css'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport SidebarChannel from './SidebarChannel'\r\nimport SignalCellularAltIcon from '@material-ui/icons/SignalCellularAlt'\r\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined'\r\nimport CallIcon from '@material-ui/icons/Call'\r\nimport { Avatar } from '@material-ui/core'\r\nimport MicIcon from '@material-ui/icons/Mic'\r\nimport HeadsetIcon from '@material-ui/icons/Headset'\r\nimport SettingsIcon from '@material-ui/icons/Settings'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectUser } from './features/userSlice'\r\nimport db, { auth } from './firebase'\r\nimport { useState } from 'react'\r\nimport { useEffect } from 'react'\r\nimport axios from './axios'\r\nimport Pusher from 'pusher-js'\r\n\r\nconst pusher = new Pusher('cbfe61332f4cc7dc754f', {\r\n    cluster: 'ap2'\r\n  });\r\n\r\nconst Sidebar = () => {\r\n    const user = useSelector(selectUser)\r\n    const [channels, setChannels] = useState([])\r\n\r\n    const getChannels = () =>{\r\n        axios.get('/get/channelList')\r\n            .then((res)=>{\r\n                setChannels(res.data)\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getChannels()\r\n\r\n        const channel = pusher.subscribe('channels');\r\n        channel.bind('newChannel', function(data) {\r\n            getChannels()\r\n    });\r\n\r\n    }, [])\r\n\r\n    const handleAddChannel = (e) => {\r\n        e.preventDefault()\r\n\r\n        const channelName = prompt('Enter a new channel name')\r\n\r\n        if (channelName){\r\n            axios.post('/new/channel',{\r\n                channelName: channelName\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='sidebar' >\r\n            <div className=\"sidebar__top\">\r\n                <h3>Chat Box</h3>\r\n                <ExpandMoreIcon />\r\n            </div>\r\n\r\n            <div className=\"sidebar__channels\">\r\n                <div className=\"sidebar__channelsHeader\">\r\n                    <div className=\"sidebar__header\">\r\n                        <ExpandMoreIcon />\r\n                        <h4>Text Channels</h4>\r\n                    </div>\r\n\r\n                    <AddIcon onClick={handleAddChannel} className='sidebar__addChannel' />\r\n                </div>\r\n                <div className=\"sidebar__channelsList\">\r\n                    {\r\n                        channels.map(channel => (\r\n                            <SidebarChannel key={channel.id} id={channel.id} channelName={ channel.name } />\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"sidebar__voice\">\r\n                <SignalCellularAltIcon className='sidebar__voiceIcons' fontSize='large' />\r\n                <div className=\"sidebar__voiceInfo\">\r\n                    <h3>Voice Connected</h3>\r\n                    <p>Audio</p>\r\n                </div>\r\n\r\n                <div className=\"sidebar__voiceIcons\">\r\n                    <InfoOutlinedIcon />\r\n                    <CallIcon />\r\n                </div>\r\n            </div>\r\n            <div className=\"sidebar__profile\">\r\n                <Avatar src={user.photo} onClick={() => auth.signOut()} />\r\n                <div className=\"sidebar__profileInfo\">\r\n                    <h3>{user.displayName}</h3>\r\n                    <p>#{user.uid.substring(0, 5)}</p>\r\n                </div>\r\n\r\n                <div className=\"sidebar__profileIcons\">\r\n                    <MicIcon />\r\n                    <HeadsetIcon />\r\n                    <SettingsIcon />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import React from 'react'\r\nimport './ChatHeader.css'\r\nimport NotificationsIcon from '@material-ui/icons/Notifications'\r\nimport EditLocationRounded from '@material-ui/icons/EditLocationRounded'\r\nimport PeopleAltRounded from '@material-ui/icons/PeopleAltRounded'\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded'\r\nimport SendRoundedIcon from '@material-ui/icons/SendRounded'\r\nimport HelpRoundedIcon from '@material-ui/icons/HelpRounded'\r\n\r\nconst ChatHeader = ({ channelName }) => {\r\n    return (\r\n        <div className='chatHeader' >\r\n            <div className=\"chatHeader__left\">\r\n                <h3><span className=\"chatHeader__hash\">#</span>\r\n                    {channelName}\r\n                    </h3>\r\n            </div>\r\n\r\n            <div className=\"chatHeader__right\">\r\n                <NotificationsIcon />\r\n                <EditLocationRounded />\r\n                <PeopleAltRounded />\r\n\r\n                <div className=\"chatHeader__search\">\r\n                    <input type=\"text\" placeholder='Search' />\r\n                    <SearchRoundedIcon />\r\n                </div>\r\n\r\n                <SendRoundedIcon />\r\n                <HelpRoundedIcon />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatHeader\r\n","import { Avatar } from '@material-ui/core'\r\nimport React from 'react'\r\nimport './Message.css'\r\n\r\nconst Message = ({ timestamp, user, message }) => {\r\n// const Message = ({ message }) => {\r\n\r\n    // console.log(message)\r\n\r\n    return (\r\n        <div className='message' >\r\n            <Avatar src={user.photo} />\r\n            <div className=\"message__info\">\r\n                <h4>{user.displayName}\r\n                    <span className='message__timestamp' >{new Date(parseInt(timestamp)).toDateString()}</span>\r\n                </h4>\r\n\r\n                <p>{message}</p> \r\n        </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import React from 'react'\r\nimport './Chat.css'\r\nimport ChatHeader from './ChatHeader'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\r\nimport CradGiftcardIcon from '@material-ui/icons/CardGiftcard'\r\nimport GifIcon from '@material-ui/icons/Gif'\r\nimport EmojiEmoticonsIcon from '@material-ui/icons/EmojiEmotions'\r\nimport Message from './Message'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectUser } from './features/userSlice'\r\nimport { selectChannelId, selectChannelName } from './features/appSlice'\r\nimport { useState } from 'react'\r\nimport { useEffect } from 'react'\r\nimport db from './firebase'\r\nimport firebase from 'firebase'\r\nimport axios from './axios'\r\nimport Pusher from 'pusher-js'\r\n\r\nconst pusher = new Pusher('cbfe61332f4cc7dc754f', {\r\n    cluster: 'ap2'\r\n  });\r\n\r\nconst Chat = () => {\r\n    const user = useSelector(selectUser)\r\n    const channelId = useSelector(selectChannelId)\r\n    const channelName = useSelector(selectChannelName)\r\n    const [input, setInput] = useState('')\r\n    const [messages, setMessages] = useState([])\r\n\r\n    const getConversation = (channelId)=>{\r\n        if(channelId){\r\n            axios.get(`/get/conversation?id=${channelId}`).then((res)=>{\r\n                setMessages(res.data[0].conversation)\r\n            })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getConversation(channelId)\r\n\r\n        const channel = pusher.subscribe('conversation');\r\n        channel.bind('newMessage', function(data) {\r\n            getConversation(channelId)\r\n    });        \r\n    }, [channelId])\r\n\r\n    const sendMessage = (e) => {\r\n        e.preventDefault()\r\n\r\n        axios.post(`/new/message?id=${channelId}`,{\r\n            message: input,\r\n            timestamp: Date.now(), \r\n            user: user\r\n        })\r\n\r\n        setInput('')\r\n    }\r\n\r\n    return (\r\n        <div className='chat' >\r\n            <ChatHeader channelName={channelName} />\r\n\r\n            <div className=\"chat__messages\">\r\n                {messages.map((message) => {\r\n                    console.log(message)\r\n                })}\r\n                {messages.map(message => (\r\n                    <Message message={message.message} timestamp={message.timestamp} user={message.user} />\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"chat__input\">\r\n                <AddCircleIcon fontSize='large' />\r\n                <form>\r\n                    <input type=\"text\" disabled={!channelId} value={input} onChange={(e) => setInput(e.target.value)} placeholder={`Message #${channelName}`} />\r\n                    <button className='chat__inputButton' onClick={sendMessage} disabled={!channelId} type='submit'>Send Message</button>\r\n                </form>\r\n\r\n                <div className=\"chat__inputIcon\">\r\n                    <CradGiftcardIcon fontSize='large' />\r\n                    <GifIcon fontSize='large' />\r\n                    <EmojiEmoticonsIcon fontSize='large' />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import { Button } from '@material-ui/core'\r\nimport React from 'react'\r\nimport './Login.css'\r\nimport { auth, provider } from './firebase'\r\n\r\nconst Login = () => {\r\n    const signIn = () => {\r\n        // clever google login shizz...\r\n\r\n        auth.signInWithPopup(provider).catch((err) => alert(err.message))\r\n    }\r\n    return (\r\n        <div className='login' >\r\n            <div className=\"login__logo\">\r\n                <img src=\"https://www.freepnglogos.com/uploads/discord-logo-png/discord-logo-logodownload-download-logotipos-1.png\" alt=\"discord logo\" />\r\n            </div>\r\n\r\n            <Button onClick={signIn}>Sign In</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Sidebar from './Sidebar';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore'\r\nimport Chat from './Chat';\r\nimport { selectUser } from './features/userSlice';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Login from './Login';\r\nimport { useEffect } from 'react';\r\nimport { auth } from './firebase';\r\nimport { login, logout } from './features/userSlice'\r\nimport axios from './axios'\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch()\r\n  const user = useSelector(selectUser)\r\n\r\n  useEffect(() => {\r\n    //async function dispatch\r\n    auth.onAuthStateChanged((authUser) => {\r\n\r\n      console.log(authUser)\r\n\r\n      if (authUser) {\r\n        dispatch(login({\r\n          uid: authUser.uid,\r\n          photo: authUser.photoURL,\r\n          email: authUser.email,\r\n          displayName: authUser.displayName\r\n        }))\r\n      } else {\r\n        dispatch(logout())\r\n      }\r\n    })\r\n  }, [dispatch])\r\n\r\n  console.log(user)\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {user ? (\r\n        <>\r\n          <Sidebar />\r\n          <Chat />\r\n        </>\r\n\r\n      ) : (\r\n          <Login />\r\n        )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice'\r\nimport appReducer from '../features/appSlice'\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    app: appReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}